{"version":3,"sources":["qml2js-runtime.min.js","/source/qml2js-runtime.min.js"],"names":["$PUSH","$Push","arr","item","length","$Map","cb","i","len","res","$Slice","start_index","end_index","slice","strStringify","value","result","index","useCharIndex","charIndexBuggy","symbols","split","charCode","charCodeAt","Escapes","unicodePrefix","toPaddedString","toString","charAt","QMLTreeToJS","tree","options","args_info","params","args","code","_QMLTreeToJSBuilder","param_prefix","node","type","_TOPLEVEL","SyntaxError","QMLTreeToJSBuilder","ArrayQMLTreeToJSBuilder","nodes","child_node","ItemQMLTreeToJSBuilder","console","log",92,34,8,12,10,13,9,"_BLOCK","_DEBUGGER","_DO","_RETURN","_SWITCH","_THROW","_WHILE","_WITH","_LABEL","_STAT","_NAME","_FOR","_IF","_TRY","_VAR","_CONST","_NEW","_REGEXP","_ARRAY","_OBJECT","_DOT","_SUB","_CALL","_BINARY","_CONDITIONAL","_ASSIGN","_SEQ","_QMLBINDING","_QMLVALUE","_QMLALIASDEF","_QMLPROPDEF","_QMLDEFAULTPROP","_QMLSIGNALDEF","_QMLMETHOD","_QMLPROP","_QMLELEM","_QMLOBJDEF","_QMLOBJ","_QMLIMPORT","_NUM","_STRING","_FUNCTION","_UNARY_PREFIX","_UNARY_POSTFIX","global","_","import_node","join","param_name","propValue","statInfo","name","fun","arg","functionName","argsDefine","argName","window","this"],"mappings":"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","file":"qml2js-runtime.min.js","sourcesContent":["(function(global){\r\n\n/*\r\n * 更好的压缩率\r\n */\r\nfunction $Push(arr, item) {\r\n\tarr[arr.length] = item;\r\n\treturn arr\r\n}\r\n\r\nfunction $ForEach(arr, cb) {\r\n\tfor (var i = 0, len = arr.length; i < len; i += 1) {\r\n\t\tcb(arr[i], i)\r\n\t}\r\n}\r\n\r\nfunction $Map(arr, cb) {\r\n\tfor (var i = 0, len = arr.length, res = []; i < len; i += 1) {\r\n\t\t$Push(res, cb(arr[i], i))\r\n\t}\r\n\treturn res\r\n}\r\n\r\nfunction $Slice(arr, start_index, end_index) {\r\n\treturn arr.slice(start_index, end_index)\r\n};\r\n\r\n//将字符串反转义,同JSON.stringify(string)\r\nvar charIndexBuggy = \"a\" [0] != \"a\";\r\nvar Escapes = {\r\n\t92: \"\\\\\\\\\",\r\n\t34: '\\\\\"',\r\n\t8: \"\\\\b\",\r\n\t12: \"\\\\f\",\r\n\t10: \"\\\\n\",\r\n\t13: \"\\\\r\",\r\n\t9: \"\\\\t\"\r\n};\r\n\r\nfunction strStringify(value) {\r\n\tvar result = '\"',\r\n\t\tindex = 0,\r\n\t\tlength = value.length,\r\n\t\tuseCharIndex = !charIndexBuggy || length > 10;\r\n\tvar symbols = useCharIndex && (charIndexBuggy ? value.split(\"\") : value);\r\n\tfor (; index < length; index++) {\r\n\t\tvar charCode = value.charCodeAt(index);\r\n\t\t// If the character is a control character, append its Unicode or\r\n\t\t// shorthand escape sequence; otherwise, append the character as-is.\r\n\t\tswitch (charCode) {\r\n\t\t\tcase 8:\r\n\t\t\tcase 9:\r\n\t\t\tcase 10:\r\n\t\t\tcase 12:\r\n\t\t\tcase 13:\r\n\t\t\tcase 34:\r\n\t\t\tcase 92:\r\n\t\t\t\tresult += Escapes[charCode];\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tif (charCode < 32) {\r\n\t\t\t\t\tresult += unicodePrefix + toPaddedString(2, charCode.toString(16));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tresult += useCharIndex ? symbols[index] : value.charAt(index);\r\n\t\t}\r\n\t}\r\n\treturn result + '\"';\r\n};\nvar _BLOCK = \"block\",\r\n\t_DEBUGGER = \"debugger\",\r\n\t_DO = \"do\",\r\n\t_RETURN = \"return\",\r\n\t_SWITCH = \"switch\",\r\n\t_THROW = \"throw\",\r\n\t_WHILE = \"while\",\r\n\t_WITH = \"with\",\r\n\t_LABEL = \"label\",\r\n\t_STAT = \"stat\", // Statement 声明\r\n\t_NAME = \"name\",\r\n\t_FOR = \"for\",\r\n\t_IF = \"if\",\r\n\t_TRY = \"try\",\r\n\t_VAR = \"var\",\r\n\t_CONST = \"const\",\r\n\t_NEW = \"new\",\r\n\t_REGEXP = \"regexp\",\r\n\t_ARRAY = \"array\",\r\n\t_OBJECT = \"object\",\r\n\t_DOT = \"dot\",\r\n\t_SUB = \"sub\",\r\n\t_CALL = \"call\",\r\n\t_BINARY = \"binary\",\r\n\t_CONDITIONAL = \"conditional\",\r\n\t_ASSIGN = \"assign\",\r\n\t_SEQ = \"seq\",\r\n\t_QMLBINDING = \"qmlbinding\",\r\n\t_QMLVALUE = \"qmlvalue\",\r\n\t_QMLALIASDEF = \"qmlaliasdef\",\r\n\t_QMLPROPDEF = \"qmlpropdef\",\r\n\t_QMLDEFAULTPROP = \"qmldefaultprop\",\r\n\t_QMLSIGNALDEF = \"qmlsignaldef\",\r\n\t_QMLMETHOD = \"qmlmethod\",\r\n\t_QMLPROP = \"qmlprop\",\r\n\t_QMLELEM = \"qmlelem\",\r\n\t_QMLOBJDEF = \"qmlobjdef\",\r\n\t_QMLOBJ = \"qmlobj\",\r\n\t_QMLIMPORT = \"qmlimport\",\r\n\t_TOPLEVEL = \"toplevel\";\r\n// 补充\r\nvar _NUM = \"num\",\r\n\t_STRING = \"string\";\r\n_FUNCTION = \"function\"\r\n\t// 单目运算符\r\nvar _UNARY_PREFIX = \"unary-prefix\", //前\r\n\t_UNARY_POSTFIX = \"unary-postfix\"; //后\r\n\r\nglobal.QMLTreeToJS = QMLTreeToJS;\r\n\r\nfunction QMLTreeToJS(tree, options) {\r\n\t/* RETURN:\r\n\t * code\r\n\t * params\r\n\t * args\r\n\t *\r\n\t * Function(args_name, code)(args)\r\n\t */\r\n\tvar args_info = {\r\n\t\tparams: [],\r\n\t\targs: []\r\n\t}\r\n\treturn {\r\n\t\tcode: _QMLTreeToJSBuilder([tree], args_info, \"\"),\r\n\t\tparams: args_info.params,\r\n\t\targs: args_info.args\r\n\t}\r\n};\r\n\r\nfunction _QMLTreeToJSBuilder(tree, args_info, param_prefix) {\r\n\tvar i = 0;\r\n\tvar node\r\n\tvar res = \"\"\r\n\twhile (node = tree && tree[i++]) {\r\n\t\t// 不使用switch-case，确保更高的压缩率\r\n\t\t/*\r\n\t\t * TYPE\r\n\t\t */\r\n\t\tvar type = node[0];\r\n\t\t/*\r\n\t\t * importTree, documentTree\r\n\t\t */\r\n\t\tif (type === _TOPLEVEL) {\r\n\t\t\tres += QMLTreeToJSBuilder[_TOPLEVEL](node, args_info, param_prefix + \"_\" + i)\r\n\t\t} else {\r\n\t\t\tthrow SyntaxError(\"unknow TYPE:\" + type + \", Tree-Node-Index:\" + i);\r\n\t\t}\r\n\t}\r\n\treturn res\r\n};\r\nvar QMLTreeToJSBuilder = _QMLTreeToJSBuilder._ = {};\r\nQMLTreeToJSBuilder[_TOPLEVEL] = function(node, args_info, param_prefix) {\r\n\treturn \"QML.import(\" +\r\n\t\t\"[\" +\r\n\t\t$Map(node[1], function(import_node, i) {\r\n\t\t\treturn QMLTreeToJSBuilder[_QMLIMPORT](import_node, args_info, param_prefix + i)\r\n\t\t}).join() +\r\n\t\t\"],function($){\" + //$scope\r\n\t\tQMLTreeToJSBuilder[_QMLELEM](node[2], args_info, param_prefix) +\r\n\t\t\"})\"\r\n};\r\n\r\nQMLTreeToJSBuilder[_QMLIMPORT] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * moduleName, version, namespace, isDottedNotation\r\n\t */\r\n\tvar param_name = param_prefix + \"_IMPORT_\";\r\n\t$Push(args_info.params, param_name);\r\n\t$Push(args_info.args, node);\r\n\treturn param_name\r\n};\r\n\r\nQMLTreeToJSBuilder[_QMLELEM] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * className, ?, propertys\r\n\t */\r\n\tvar param_name = param_prefix + \"_ELEM_\";\r\n\t$Push(args_info.params, param_name);\r\n\t$Push(args_info.args, node);\r\n\r\n\treturn \"$.elem('\" + node[1] + \"',\" +\r\n\t\t(node[2] ? (\"'\" + node[2] + \"'\") : \"null\") +\r\n\t\t\",[\" +\r\n\t\t$Map(node[3], function(child_node, i) {\r\n\t\t\treturn QMLTreeToJSBuilder[child_node[0]](child_node, args_info, param_name + i)\r\n\t\t}).join() +\r\n\t\t\"])\"\r\n};\r\n\r\nQMLTreeToJSBuilder[_QMLPROP] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * propName, propValue, *sourceCode\r\n\t */\r\n\tvar param_name = param_prefix + \"_PROP_\";\r\n\tvar propValue = node[2];\r\n\t// $Push(args_info.params, param_name);\r\n\t// $Push(args_info.args, node);\r\n\r\n\treturn \"$.prop('\" + node[1] + \"',\" +\r\n\t\tQMLTreeToJSBuilder[propValue[0]](propValue, args_info, param_name) +\r\n\t\t\")\"\r\n};\r\nQMLTreeToJSBuilder[_QMLBINDING] = function(node, args_info, param_prefix) {\r\n\treturn \"QMLBINDING()\"\r\n};\r\nQMLTreeToJSBuilder[_QMLVALUE] = function(node, args_info, param_prefix) {\r\n\treturn \"QMLVALUE()\"\r\n};\r\nQMLTreeToJSBuilder[_QMLALIASDEF] = function(node, args_info, param_prefix) {\r\n\treturn \"QMLALIASDEF()\"\r\n};\r\nQMLTreeToJSBuilder[_QMLPROPDEF] = function(node, args_info, param_prefix) {\r\n\treturn \"QMLPROPDEF()\"\r\n};\r\nQMLTreeToJSBuilder[_QMLDEFAULTPROP] = function(node, args_info, param_prefix) {\r\n\treturn \"QMLDEFAULTPROP()\"\r\n};\r\nQMLTreeToJSBuilder[_QMLSIGNALDEF] = function(node, args_info, param_prefix) {\r\n\treturn \"QMLSIGNALDEF()\"\r\n};\r\nQMLTreeToJSBuilder[_QMLMETHOD] = function(node, args_info, param_prefix) {\r\n\treturn \"QMLMETHOD()\"\r\n};\r\nQMLTreeToJSBuilder[_QMLOBJDEF] = function(node, args_info, param_prefix) {\r\n\treturn \"$.objdef('\" + node[1] + \"','\" + node[2] + \"',\" + ItemQMLTreeToJSBuilder(node[3]) + \")\"\r\n};\r\nQMLTreeToJSBuilder[_QMLOBJ] = function(node, args_info, param_prefix) {\r\n\treturn \"QMLOBJ()\"\r\n};\r\n\r\nfunction ArrayQMLTreeToJSBuilder(nodes, args_info, param_prefix) {\r\n\treturn $Map(nodes, function(child_node, i) {\r\n\t\treturn ItemQMLTreeToJSBuilder(child_node, args_info, param_prefix + i)\r\n\t})/*.join()*/ //join可以不写会隐式调用\r\n};\r\n\r\nfunction ItemQMLTreeToJSBuilder(node, args_info, param_prefix) {\r\n\tif (node && !QMLTreeToJSBuilder[node[0]]) {\r\n\t\tconsole.log(node)\r\n\t}\r\n\treturn node && QMLTreeToJSBuilder[node[0]](node, args_info, param_prefix)\r\n};\nQMLTreeToJSBuilder[_BLOCK] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * 代码块，存在于function，if-else，while，try等可以包裹代码块的地方\r\n\t * TODO：与ES6中的let关键字相关\r\n\t */\r\n\treturn \"$.block(\" + ArrayQMLTreeToJSBuilder(node[1], args_info, param_prefix) + \")\"\r\n};\r\nQMLTreeToJSBuilder[_DEBUGGER] = function(node, args_info, param_prefix) {\r\n\treturn \"DEBUGGER()\"\r\n};\r\nQMLTreeToJSBuilder[_DO] = function(node, args_info, param_prefix) {\r\n\treturn \"DO()\"\r\n};\r\nQMLTreeToJSBuilder[_RETURN] = function(node, args_info, param_prefix) {\r\n\treturn \"$.return(\" + ItemQMLTreeToJSBuilder(node[1], args_info, param_prefix) + \")\"\r\n};\r\nQMLTreeToJSBuilder[_SWITCH] = function(node, args_info, param_prefix) {\r\n\treturn \"SWITCH()\"\r\n};\r\nQMLTreeToJSBuilder[_THROW] = function(node, args_info, param_prefix) {\r\n\treturn \"THROW()\"\r\n};\r\nQMLTreeToJSBuilder[_WHILE] = function(node, args_info, param_prefix) {\r\n\treturn \"WHILE()\"\r\n};\r\nQMLTreeToJSBuilder[_WITH] = function(node, args_info, param_prefix) {\r\n\treturn \"WITH()\"\r\n};\r\nQMLTreeToJSBuilder[_LABEL] = function(node, args_info, param_prefix) {\r\n\treturn \"LABEL()\"\r\n};\r\nQMLTreeToJSBuilder[_STAT] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * statType,..args\r\n\t */\r\n\tvar statInfo = node[1]\r\n\treturn ItemQMLTreeToJSBuilder(statInfo, args_info, param_prefix);\r\n};\r\nQMLTreeToJSBuilder[_NAME] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * name||boolean||null\r\n\t */\r\n\tvar name = node[1];\r\n\tif (name === \"null\" || name === \"false\" || name === \"true\") {\r\n\t\treturn name\r\n\t}\r\n\treturn \"$.name('\" + name + \"')\";\r\n};\r\nQMLTreeToJSBuilder[_FOR] = function(node, args_info, param_prefix) {\r\n\treturn \"FOR()\"\r\n};\r\nQMLTreeToJSBuilder[_IF] = function(node, args_info, param_prefix) {\r\n\treturn \"IF()\"\r\n};\r\nQMLTreeToJSBuilder[_TRY] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * try ,catch , finally(可能是null)\r\n\t * try、finally里面是多行代码\r\n\t * catch是一段特殊声明的err字段加上代码块\r\n\t */\r\n\treturn \"$.try([\" +\r\n\t\t// try\r\n\t\tArrayQMLTreeToJSBuilder(node[1], args_info, param_prefix) + \"],'\" + //try-body\r\n\t\t// catch\r\n\t\tnode[2][0] + \"',[\" + //catch-err-name\r\n\t\tArrayQMLTreeToJSBuilder(node[2][1], args_info, param_prefix) + \"],\" + //catch-body\r\n\t\t// finally\r\n\t\t(node[3] && (\"[\" + ArrayQMLTreeToJSBuilder(node[3], args_info, param_prefix) + \"]\")) + //finally-body\r\n\t\t\")\"\r\n};\r\nQMLTreeToJSBuilder[_VAR] = function(node, args_info, param_prefix) {\r\n\treturn \"VAR()\"\r\n};\r\nQMLTreeToJSBuilder[_CONST] = function(node, args_info, param_prefix) {\r\n\treturn \"CONST()\"\r\n};\r\nQMLTreeToJSBuilder[_NEW] = function(node, args_info, param_prefix) {\r\n\treturn \"NEW()\"\r\n};\r\nQMLTreeToJSBuilder[_REGEXP] = function(node, args_info, param_prefix) {\r\n\treturn \"REGEXP()\"\r\n};\r\nQMLTreeToJSBuilder[_ARRAY] = function(node, args_info, param_prefix) {\r\n\treturn \"ARRAY()\"\r\n};\r\nQMLTreeToJSBuilder[_OBJECT] = function(node, args_info, param_prefix) {\r\n\treturn \"OBJECT()\"\r\n};\r\n/*\r\n * 取属性\r\n * dot是直接取: a.b\r\n * sub是使用下标取: a['b']\r\n */\r\nQMLTreeToJSBuilder[_DOT] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * obj,key\r\n\t */\r\n\treturn \"$.dot(\" + ItemQMLTreeToJSBuilder(node[1]) + \",'\" + node[2] + \"')\"\r\n};\r\nQMLTreeToJSBuilder[_SUB] = function(node, args_info, param_prefix) {\r\n\treturn \"$.sub(\" + ArrayQMLTreeToJSBuilder($Slice(node, 1)) + \")\"\r\n};\r\n/*\r\n * 调用函数\r\n */\r\nQMLTreeToJSBuilder[_CALL] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * function(defined or get by name),args(Array)\r\n\t */\r\n\tvar fun = node[1]\r\n\treturn \"$.call(\" + ItemQMLTreeToJSBuilder(fun, args_info, param_prefix) +\r\n\t\t\",[\" +\r\n\t\tArrayQMLTreeToJSBuilder(node[2], args_info, param_prefix) +\r\n\t\t\"])\"\r\n};\r\n/*\r\n * 双目运算符\r\n */\r\nQMLTreeToJSBuilder[_BINARY] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * 二进制表达式，或者是运算表达式，比如>>、<<、+、^等等\r\n\t * 逻辑表达式，就||、&&什么的\r\n\t */\r\n\t// var arg1 = node[2];\r\n\t// var arg2 = node[3];\r\n\treturn \"$.binary('\" + node[1] + \"',\" +\r\n\t\tArrayQMLTreeToJSBuilder($Slice(node, 2), args_info, param_prefix) +\r\n\t\t\")\"\r\n};\r\n/*\r\n * 三目运算符\r\n */\r\nQMLTreeToJSBuilder[_CONDITIONAL] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * 条件表达式\r\n\t */\r\n\t// var _if = node[1];\r\n\t// var _then = node[2];\r\n\t// var _else = node[3];\r\n\treturn \"$.conditional(\" +\r\n\t\tArrayQMLTreeToJSBuilder($Slice(node, 1), args_info, param_prefix) +\r\n\t\t\")\"\r\n};\r\nQMLTreeToJSBuilder[_ASSIGN] = function(node, args_info, param_prefix) {\r\n\treturn \"ASSIGN()\"\r\n};\r\nQMLTreeToJSBuilder[_SEQ] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * 序列表达式，意味着多个表达式混合，用,进行分隔\r\n\t * \"seq\", statItem, ...statItem\r\n\t */\r\n\treturn \"$.seq(\" +\r\n\t\tArrayQMLTreeToJSBuilder($Slice(node, 1), args_info, param_prefix) +\r\n\t\t\")\"\r\n};\r\n/*\r\n * 替代原生的对象：number、string\r\n * 从而在不改动原生prototype的基础上拓展方法\r\n * boolean语法和name的语法一样，在name那边做处理，基本上也没什么可以拓展的，所以直接用原生的\r\n */\r\nQMLTreeToJSBuilder[_NUM] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * number\r\n\t * TODO:ES6中数字的表达范围更广，所以到时候要针对高版本的数值表达字符串给解析成数字\r\n\t */\r\n\treturn \"$.num(\" + node[1] + \")\"\r\n};\r\nQMLTreeToJSBuilder[_STRING] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * string\r\n\t */\r\n\treturn \"$.string(\" + strStringify(node[1]) + \")\"\r\n};\r\n/*\r\n * 单目运算符\r\n */\r\nQMLTreeToJSBuilder[_UNARY_PREFIX] = function(node, args_info, param_prefix) {\r\n\tvar arg = node[2];\r\n\treturn \"$.unary_prefix('\" + node[1] + \"',\" + ItemQMLTreeToJSBuilder(arg, args_info, param_prefix) + \")\";\r\n};\r\nQMLTreeToJSBuilder[_UNARY_POSTFIX] = function(node, args_info, param_prefix) {\r\n\tvar arg = node[2];\r\n\treturn \"$.unary_postfix('\" + node[1] + \"',\" + ItemQMLTreeToJSBuilder(arg, args_info, param_prefix) + \")\";\r\n};\r\n/*\r\n * 函数定义\r\n */\r\nQMLTreeToJSBuilder[_FUNCTION] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * FunctionName(string||null), ArgsDefine[], FunctionBody\r\n\t * 函数的定义需要把当前的声明域传入\r\n\t * TODO:目前Parser中不支持默认参数等ES6特性\r\n\t */\r\n\tvar functionName = node[1];\r\n\tfunctionName && (functionName = strStringify(functionName)); //同'\"'+functionName+'\"'，这里为了节省字符\r\n\tvar argsDefine = $Map(node[2], function(argName) {\r\n\t\treturn strStringify(argName)\r\n\t});\r\n\r\n\treturn \"$.function(\" + functionName + \",[\" + argsDefine.join() + \"])\"\r\n};\n})(typeof global != 'undefined' ? global : typeof window != 'undefined' ? window : this);","(function(global){\r\n\n/*\r\n * 更好的压缩率\r\n */\r\nfunction $Push(arr, item) {\r\n\tarr[arr.length] = item;\r\n\treturn arr\r\n}\r\n\r\nfunction $ForEach(arr, cb) {\r\n\tfor (var i = 0, len = arr.length; i < len; i += 1) {\r\n\t\tcb(arr[i], i)\r\n\t}\r\n}\r\n\r\nfunction $Map(arr, cb) {\r\n\tfor (var i = 0, len = arr.length, res = []; i < len; i += 1) {\r\n\t\t$Push(res, cb(arr[i], i))\r\n\t}\r\n\treturn res\r\n}\r\n\r\nfunction $Slice(arr, start_index, end_index) {\r\n\treturn arr.slice(start_index, end_index)\r\n};\r\n\r\n//将字符串反转义,同JSON.stringify(string)\r\nvar charIndexBuggy = \"a\" [0] != \"a\";\r\nvar Escapes = {\r\n\t92: \"\\\\\\\\\",\r\n\t34: '\\\\\"',\r\n\t8: \"\\\\b\",\r\n\t12: \"\\\\f\",\r\n\t10: \"\\\\n\",\r\n\t13: \"\\\\r\",\r\n\t9: \"\\\\t\"\r\n};\r\n\r\nfunction strStringify(value) {\r\n\tvar result = '\"',\r\n\t\tindex = 0,\r\n\t\tlength = value.length,\r\n\t\tuseCharIndex = !charIndexBuggy || length > 10;\r\n\tvar symbols = useCharIndex && (charIndexBuggy ? value.split(\"\") : value);\r\n\tfor (; index < length; index++) {\r\n\t\tvar charCode = value.charCodeAt(index);\r\n\t\t// If the character is a control character, append its Unicode or\r\n\t\t// shorthand escape sequence; otherwise, append the character as-is.\r\n\t\tswitch (charCode) {\r\n\t\t\tcase 8:\r\n\t\t\tcase 9:\r\n\t\t\tcase 10:\r\n\t\t\tcase 12:\r\n\t\t\tcase 13:\r\n\t\t\tcase 34:\r\n\t\t\tcase 92:\r\n\t\t\t\tresult += Escapes[charCode];\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tif (charCode < 32) {\r\n\t\t\t\t\tresult += unicodePrefix + toPaddedString(2, charCode.toString(16));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tresult += useCharIndex ? symbols[index] : value.charAt(index);\r\n\t\t}\r\n\t}\r\n\treturn result + '\"';\r\n};\nvar _BLOCK = \"block\",\r\n\t_DEBUGGER = \"debugger\",\r\n\t_DO = \"do\",\r\n\t_RETURN = \"return\",\r\n\t_SWITCH = \"switch\",\r\n\t_THROW = \"throw\",\r\n\t_WHILE = \"while\",\r\n\t_WITH = \"with\",\r\n\t_LABEL = \"label\",\r\n\t_STAT = \"stat\", // Statement 声明\r\n\t_NAME = \"name\",\r\n\t_FOR = \"for\",\r\n\t_IF = \"if\",\r\n\t_TRY = \"try\",\r\n\t_VAR = \"var\",\r\n\t_CONST = \"const\",\r\n\t_NEW = \"new\",\r\n\t_REGEXP = \"regexp\",\r\n\t_ARRAY = \"array\",\r\n\t_OBJECT = \"object\",\r\n\t_DOT = \"dot\",\r\n\t_SUB = \"sub\",\r\n\t_CALL = \"call\",\r\n\t_BINARY = \"binary\",\r\n\t_CONDITIONAL = \"conditional\",\r\n\t_ASSIGN = \"assign\",\r\n\t_SEQ = \"seq\",\r\n\t_QMLBINDING = \"qmlbinding\",\r\n\t_QMLVALUE = \"qmlvalue\",\r\n\t_QMLALIASDEF = \"qmlaliasdef\",\r\n\t_QMLPROPDEF = \"qmlpropdef\",\r\n\t_QMLDEFAULTPROP = \"qmldefaultprop\",\r\n\t_QMLSIGNALDEF = \"qmlsignaldef\",\r\n\t_QMLMETHOD = \"qmlmethod\",\r\n\t_QMLPROP = \"qmlprop\",\r\n\t_QMLELEM = \"qmlelem\",\r\n\t_QMLOBJDEF = \"qmlobjdef\",\r\n\t_QMLOBJ = \"qmlobj\",\r\n\t_QMLIMPORT = \"qmlimport\",\r\n\t_TOPLEVEL = \"toplevel\";\r\n// 补充\r\nvar _NUM = \"num\",\r\n\t_STRING = \"string\";\r\n_FUNCTION = \"function\"\r\n\t// 单目运算符\r\nvar _UNARY_PREFIX = \"unary-prefix\", //前\r\n\t_UNARY_POSTFIX = \"unary-postfix\"; //后\r\n\r\nglobal.QMLTreeToJS = QMLTreeToJS;\r\n\r\nfunction QMLTreeToJS(tree, options) {\r\n\t/* RETURN:\r\n\t * code\r\n\t * params\r\n\t * args\r\n\t *\r\n\t * Function(args_name, code)(args)\r\n\t */\r\n\tvar args_info = {\r\n\t\tparams: [],\r\n\t\targs: []\r\n\t}\r\n\treturn {\r\n\t\tcode: _QMLTreeToJSBuilder([tree], args_info, \"\"),\r\n\t\tparams: args_info.params,\r\n\t\targs: args_info.args\r\n\t}\r\n};\r\n\r\nfunction _QMLTreeToJSBuilder(tree, args_info, param_prefix) {\r\n\tvar i = 0;\r\n\tvar node\r\n\tvar res = \"\"\r\n\twhile (node = tree && tree[i++]) {\r\n\t\t// 不使用switch-case，确保更高的压缩率\r\n\t\t/*\r\n\t\t * TYPE\r\n\t\t */\r\n\t\tvar type = node[0];\r\n\t\t/*\r\n\t\t * importTree, documentTree\r\n\t\t */\r\n\t\tif (type === _TOPLEVEL) {\r\n\t\t\tres += QMLTreeToJSBuilder[_TOPLEVEL](node, args_info, param_prefix + \"_\" + i)\r\n\t\t} else {\r\n\t\t\tthrow SyntaxError(\"unknow TYPE:\" + type + \", Tree-Node-Index:\" + i);\r\n\t\t}\r\n\t}\r\n\treturn res\r\n};\r\nvar QMLTreeToJSBuilder = _QMLTreeToJSBuilder._ = {};\r\nQMLTreeToJSBuilder[_TOPLEVEL] = function(node, args_info, param_prefix) {\r\n\treturn \"QML.import(\" +\r\n\t\t\"[\" +\r\n\t\t$Map(node[1], function(import_node, i) {\r\n\t\t\treturn QMLTreeToJSBuilder[_QMLIMPORT](import_node, args_info, param_prefix + i)\r\n\t\t}).join() +\r\n\t\t\"],function($){\" + //$scope\r\n\t\tQMLTreeToJSBuilder[_QMLELEM](node[2], args_info, param_prefix) +\r\n\t\t\"})\"\r\n};\r\n\r\nQMLTreeToJSBuilder[_QMLIMPORT] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * moduleName, version, namespace, isDottedNotation\r\n\t */\r\n\tvar param_name = param_prefix + \"_IMPORT_\";\r\n\t$Push(args_info.params, param_name);\r\n\t$Push(args_info.args, node);\r\n\treturn param_name\r\n};\r\n\r\nQMLTreeToJSBuilder[_QMLELEM] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * className, ?, propertys\r\n\t */\r\n\tvar param_name = param_prefix + \"_ELEM_\";\r\n\t$Push(args_info.params, param_name);\r\n\t$Push(args_info.args, node);\r\n\r\n\treturn \"$.elem('\" + node[1] + \"',\" +\r\n\t\t(node[2] ? (\"'\" + node[2] + \"'\") : \"null\") +\r\n\t\t\",[\" +\r\n\t\t$Map(node[3], function(child_node, i) {\r\n\t\t\treturn QMLTreeToJSBuilder[child_node[0]](child_node, args_info, param_name + i)\r\n\t\t}).join() +\r\n\t\t\"])\"\r\n};\r\n\r\nQMLTreeToJSBuilder[_QMLPROP] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * propName, propValue, *sourceCode\r\n\t */\r\n\tvar param_name = param_prefix + \"_PROP_\";\r\n\tvar propValue = node[2];\r\n\t// $Push(args_info.params, param_name);\r\n\t// $Push(args_info.args, node);\r\n\r\n\treturn \"$.prop('\" + node[1] + \"',\" +\r\n\t\tQMLTreeToJSBuilder[propValue[0]](propValue, args_info, param_name) +\r\n\t\t\")\"\r\n};\r\nQMLTreeToJSBuilder[_QMLBINDING] = function(node, args_info, param_prefix) {\r\n\treturn \"QMLBINDING()\"\r\n};\r\nQMLTreeToJSBuilder[_QMLVALUE] = function(node, args_info, param_prefix) {\r\n\treturn \"QMLVALUE()\"\r\n};\r\nQMLTreeToJSBuilder[_QMLALIASDEF] = function(node, args_info, param_prefix) {\r\n\treturn \"QMLALIASDEF()\"\r\n};\r\nQMLTreeToJSBuilder[_QMLPROPDEF] = function(node, args_info, param_prefix) {\r\n\treturn \"QMLPROPDEF()\"\r\n};\r\nQMLTreeToJSBuilder[_QMLDEFAULTPROP] = function(node, args_info, param_prefix) {\r\n\treturn \"QMLDEFAULTPROP()\"\r\n};\r\nQMLTreeToJSBuilder[_QMLSIGNALDEF] = function(node, args_info, param_prefix) {\r\n\treturn \"QMLSIGNALDEF()\"\r\n};\r\nQMLTreeToJSBuilder[_QMLMETHOD] = function(node, args_info, param_prefix) {\r\n\treturn \"QMLMETHOD()\"\r\n};\r\nQMLTreeToJSBuilder[_QMLOBJDEF] = function(node, args_info, param_prefix) {\r\n\treturn \"$.objdef('\" + node[1] + \"','\" + node[2] + \"',\" + ItemQMLTreeToJSBuilder(node[3]) + \")\"\r\n};\r\nQMLTreeToJSBuilder[_QMLOBJ] = function(node, args_info, param_prefix) {\r\n\treturn \"QMLOBJ()\"\r\n};\r\n\r\nfunction ArrayQMLTreeToJSBuilder(nodes, args_info, param_prefix) {\r\n\treturn $Map(nodes, function(child_node, i) {\r\n\t\treturn ItemQMLTreeToJSBuilder(child_node, args_info, param_prefix + i)\r\n\t})/*.join()*/ //join可以不写会隐式调用\r\n};\r\n\r\nfunction ItemQMLTreeToJSBuilder(node, args_info, param_prefix) {\r\n\tif (node && !QMLTreeToJSBuilder[node[0]]) {\r\n\t\tconsole.log(node)\r\n\t}\r\n\treturn node && QMLTreeToJSBuilder[node[0]](node, args_info, param_prefix)\r\n};\nQMLTreeToJSBuilder[_BLOCK] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * 代码块，存在于function，if-else，while，try等可以包裹代码块的地方\r\n\t * TODO：与ES6中的let关键字相关\r\n\t */\r\n\treturn \"$.block(\" + ArrayQMLTreeToJSBuilder(node[1], args_info, param_prefix) + \")\"\r\n};\r\nQMLTreeToJSBuilder[_DEBUGGER] = function(node, args_info, param_prefix) {\r\n\treturn \"DEBUGGER()\"\r\n};\r\nQMLTreeToJSBuilder[_DO] = function(node, args_info, param_prefix) {\r\n\treturn \"DO()\"\r\n};\r\nQMLTreeToJSBuilder[_RETURN] = function(node, args_info, param_prefix) {\r\n\treturn \"$.return(\" + ItemQMLTreeToJSBuilder(node[1], args_info, param_prefix) + \")\"\r\n};\r\nQMLTreeToJSBuilder[_SWITCH] = function(node, args_info, param_prefix) {\r\n\treturn \"SWITCH()\"\r\n};\r\nQMLTreeToJSBuilder[_THROW] = function(node, args_info, param_prefix) {\r\n\treturn \"THROW()\"\r\n};\r\nQMLTreeToJSBuilder[_WHILE] = function(node, args_info, param_prefix) {\r\n\treturn \"WHILE()\"\r\n};\r\nQMLTreeToJSBuilder[_WITH] = function(node, args_info, param_prefix) {\r\n\treturn \"WITH()\"\r\n};\r\nQMLTreeToJSBuilder[_LABEL] = function(node, args_info, param_prefix) {\r\n\treturn \"LABEL()\"\r\n};\r\nQMLTreeToJSBuilder[_STAT] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * statType,..args\r\n\t */\r\n\tvar statInfo = node[1]\r\n\treturn ItemQMLTreeToJSBuilder(statInfo, args_info, param_prefix);\r\n};\r\nQMLTreeToJSBuilder[_NAME] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * name||boolean||null\r\n\t */\r\n\tvar name = node[1];\r\n\tif (name === \"null\" || name === \"false\" || name === \"true\") {\r\n\t\treturn name\r\n\t}\r\n\treturn \"$.name('\" + name + \"')\";\r\n};\r\nQMLTreeToJSBuilder[_FOR] = function(node, args_info, param_prefix) {\r\n\treturn \"FOR()\"\r\n};\r\nQMLTreeToJSBuilder[_IF] = function(node, args_info, param_prefix) {\r\n\treturn \"IF()\"\r\n};\r\nQMLTreeToJSBuilder[_TRY] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * try ,catch , finally(可能是null)\r\n\t * try、finally里面是多行代码\r\n\t * catch是一段特殊声明的err字段加上代码块\r\n\t */\r\n\treturn \"$.try([\" +\r\n\t\t// try\r\n\t\tArrayQMLTreeToJSBuilder(node[1], args_info, param_prefix) + \"],'\" + //try-body\r\n\t\t// catch\r\n\t\tnode[2][0] + \"',[\" + //catch-err-name\r\n\t\tArrayQMLTreeToJSBuilder(node[2][1], args_info, param_prefix) + \"],\" + //catch-body\r\n\t\t// finally\r\n\t\t(node[3] && (\"[\" + ArrayQMLTreeToJSBuilder(node[3], args_info, param_prefix) + \"]\")) + //finally-body\r\n\t\t\")\"\r\n};\r\nQMLTreeToJSBuilder[_VAR] = function(node, args_info, param_prefix) {\r\n\treturn \"VAR()\"\r\n};\r\nQMLTreeToJSBuilder[_CONST] = function(node, args_info, param_prefix) {\r\n\treturn \"CONST()\"\r\n};\r\nQMLTreeToJSBuilder[_NEW] = function(node, args_info, param_prefix) {\r\n\treturn \"NEW()\"\r\n};\r\nQMLTreeToJSBuilder[_REGEXP] = function(node, args_info, param_prefix) {\r\n\treturn \"REGEXP()\"\r\n};\r\nQMLTreeToJSBuilder[_ARRAY] = function(node, args_info, param_prefix) {\r\n\treturn \"ARRAY()\"\r\n};\r\nQMLTreeToJSBuilder[_OBJECT] = function(node, args_info, param_prefix) {\r\n\treturn \"OBJECT()\"\r\n};\r\n/*\r\n * 取属性\r\n * dot是直接取: a.b\r\n * sub是使用下标取: a['b']\r\n */\r\nQMLTreeToJSBuilder[_DOT] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * obj,key\r\n\t */\r\n\treturn \"$.dot(\" + ItemQMLTreeToJSBuilder(node[1]) + \",'\" + node[2] + \"')\"\r\n};\r\nQMLTreeToJSBuilder[_SUB] = function(node, args_info, param_prefix) {\r\n\treturn \"$.sub(\" + ArrayQMLTreeToJSBuilder($Slice(1)) + \")\"\r\n};\r\n/*\r\n * 调用函数\r\n */\r\nQMLTreeToJSBuilder[_CALL] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * function(defined or get by name),args(Array)\r\n\t */\r\n\tvar fun = node[1]\r\n\treturn \"$.call(\" + ItemQMLTreeToJSBuilder(fun, args_info, param_prefix) +\r\n\t\t\",[\" +\r\n\t\tArrayQMLTreeToJSBuilder(node[2], args_info, param_prefix) +\r\n\t\t\"])\"\r\n};\r\n/*\r\n * 双目运算符\r\n */\r\nQMLTreeToJSBuilder[_BINARY] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * 二进制表达式，或者是运算表达式，比如>>、<<、+、^等等\r\n\t * 逻辑表达式，就||、&&什么的\r\n\t */\r\n\t// var arg1 = node[2];\r\n\t// var arg2 = node[3];\r\n\treturn \"$.binary('\" + node[1] + \"',\" +\r\n\t\tArrayQMLTreeToJSBuilder($Slice(node, 2), args_info, param_prefix) +\r\n\t\t\")\"\r\n};\r\n/*\r\n * 三目运算符\r\n */\r\nQMLTreeToJSBuilder[_CONDITIONAL] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * 条件表达式\r\n\t */\r\n\t// var _if = node[1];\r\n\t// var _then = node[2];\r\n\t// var _else = node[3];\r\n\treturn \"$.conditional(\" +\r\n\t\tArrayQMLTreeToJSBuilder($Slice(node, 1), args_info, param_prefix) +\r\n\t\t\")\"\r\n};\r\nQMLTreeToJSBuilder[_ASSIGN] = function(node, args_info, param_prefix) {\r\n\treturn \"ASSIGN()\"\r\n};\r\nQMLTreeToJSBuilder[_SEQ] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * 序列表达式，意味着多个表达式混合，用,进行分隔\r\n\t * \"seq\", statItem, ...statItem\r\n\t */\r\n\treturn \"$.seq(\" +\r\n\t\tArrayQMLTreeToJSBuilder($Slice(node, 1), args_info, param_prefix) +\r\n\t\t\")\"\r\n};\r\n/*\r\n * 替代原生的对象：number、string\r\n * 从而在不改动原生prototype的基础上拓展方法\r\n * boolean语法和name的语法一样，在name那边做处理，基本上也没什么可以拓展的，所以直接用原生的\r\n */\r\nQMLTreeToJSBuilder[_NUM] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * number\r\n\t * TODO:ES6中数字的表达范围更广，所以到时候要针对高版本的数值表达字符串给解析成数字\r\n\t */\r\n\treturn \"$.num(\" + node[1] + \")\"\r\n};\r\nQMLTreeToJSBuilder[_STRING] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * string\r\n\t */\r\n\treturn \"$.string(\" + strStringify(node[1]) + \")\"\r\n};\r\n/*\r\n * 单目运算符\r\n */\r\nQMLTreeToJSBuilder[_UNARY_PREFIX] = function(node, args_info, param_prefix) {\r\n\tvar arg = node[2];\r\n\treturn \"$.unary_prefix('\" + node[1] + \"',\" + ItemQMLTreeToJSBuilder(arg, args_info, param_prefix) + \")\";\r\n};\r\nQMLTreeToJSBuilder[_UNARY_POSTFIX] = function(node, args_info, param_prefix) {\r\n\tvar arg = node[2];\r\n\treturn \"$.unary_postfix('\" + node[1] + \"',\" + ItemQMLTreeToJSBuilder(arg, args_info, param_prefix) + \")\";\r\n};\r\n/*\r\n * 函数定义\r\n */\r\nQMLTreeToJSBuilder[_FUNCTION] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * FunctionName(string||null), ArgsDefine[], FunctionBody\r\n\t * 函数的定义需要把当前的声明域传入\r\n\t * TODO:目前Parser中不支持默认参数等ES6特性\r\n\t */\r\n\tvar functionName = node[1];\r\n\tfunctionName && (functionName = strStringify(functionName)); //同'\"'+functionName+'\"'，这里为了节省字符\r\n\tvar argsDefine = $Map(node[2], function(argName) {\r\n\t\treturn strStringify(argName)\r\n\t});\r\n\r\n\treturn \"$.function(\" + functionName + \",[\" + argsDefine.join() + \"])\"\r\n};\n})(typeof global != 'undefined' ? global : typeof window != 'undefined' ? window : this);"],"sourceRoot":"/source/"}