{"version":3,"sources":["qml2js-runtime.min.js","/source/qml2js-runtime.min.js"],"names":["$PUSH","$Push","arr","item","length","$ForEach","cb","i","len","$Map","res","$Slice","start_index","end_index","slice","strStringify","value","result","index","useCharIndex","charIndexBuggy","symbols","split","charCode","charCodeAt","Escapes","unicodePrefix","toPaddedString","toString","charAt","QMLTreeToJS","tree","options","args_info","params","args","code","_QMLTreeToJSBuilder","param_prefix","node","type","_TOPLEVEL","SyntaxError","QMLTreeToJSBuilder","ArrayQMLTreeToJSBuilder","nodes","child_node","ItemQMLTreeToJSBuilder","console","log","Doc","doc","this","global","document","QMLElem","tagName","namespace","self","toUpperCase","dom","createElement","attr","QmlPropSet","addAttr","qmlprop","RunTime","scope","Scope","globalDoc","obj","parent","data","globalScope",92,34,8,12,10,13,9,"_BLOCK","_DEBUGGER","_DO","_RETURN","_SWITCH","_THROW","_WHILE","_WITH","_LABEL","_STAT","_NAME","_FOR","_IF","_TRY","_VAR","_CONST","_NEW","_REGEXP","_ARRAY","_OBJECT","_DOT","_SUB","_CALL","_BINARY","_CONDITIONAL","_ASSIGN","_SEQ","_QMLBINDING","_QMLVALUE","_QMLALIASDEF","_QMLPROPDEF","_QMLDEFAULTPROP","_QMLSIGNALDEF","_QMLMETHOD","_QMLPROP","_QMLELEM","_QMLOBJDEF","_QMLOBJ","_QMLIMPORT","_NUM","_STRING","_FUNCTION","_UNARY_PREFIX","_UNARY_POSTFIX","_","import_node","join","param_name","propValue","prototype","nodeName","statInfo","name","fun","arg","functionName","argsDefine","argName","QML","import","deps","callback","BLOCK","get","key","set","window"],"mappings":"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","file":"qml2js-runtime.min.js","sourcesContent":["(function(global){\r\n\n/*\r\n * 更好的压缩率\r\n */\r\nfunction $Push(arr, item) {\r\n\tarr[arr.length] = item;\r\n\treturn arr\r\n}\r\n\r\nfunction $ForEach(arr, cb) {\r\n\tfor (var i = 0, len = arr.length; i < len; i += 1) {\r\n\t\tcb(arr[i], i)\r\n\t}\r\n}\r\n\r\nfunction $Map(arr, cb) {\r\n\tfor (var i = 0, len = arr.length, res = []; i < len; i += 1) {\r\n\t\t$Push(res, cb(arr[i], i))\r\n\t}\r\n\treturn res\r\n}\r\n\r\nfunction $Slice(arr, start_index, end_index) {\r\n\treturn arr.slice(start_index, end_index)\r\n};\r\n\r\n//将字符串反转义,同JSON.stringify(string)\r\nvar charIndexBuggy = \"a\" [0] != \"a\";\r\nvar Escapes = {\r\n\t92: \"\\\\\\\\\",\r\n\t34: '\\\\\"',\r\n\t8: \"\\\\b\",\r\n\t12: \"\\\\f\",\r\n\t10: \"\\\\n\",\r\n\t13: \"\\\\r\",\r\n\t9: \"\\\\t\"\r\n};\r\n\r\nfunction strStringify(value) {\r\n\tvar result = '\"',\r\n\t\tindex = 0,\r\n\t\tlength = value.length,\r\n\t\tuseCharIndex = !charIndexBuggy || length > 10;\r\n\tvar symbols = useCharIndex && (charIndexBuggy ? value.split(\"\") : value);\r\n\tfor (; index < length; index++) {\r\n\t\tvar charCode = value.charCodeAt(index);\r\n\t\t// If the character is a control character, append its Unicode or\r\n\t\t// shorthand escape sequence; otherwise, append the character as-is.\r\n\t\tswitch (charCode) {\r\n\t\t\tcase 8:\r\n\t\t\tcase 9:\r\n\t\t\tcase 10:\r\n\t\t\tcase 12:\r\n\t\t\tcase 13:\r\n\t\t\tcase 34:\r\n\t\t\tcase 92:\r\n\t\t\t\tresult += Escapes[charCode];\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tif (charCode < 32) {\r\n\t\t\t\t\tresult += unicodePrefix + toPaddedString(2, charCode.toString(16));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tresult += useCharIndex ? symbols[index] : value.charAt(index);\r\n\t\t}\r\n\t}\r\n\treturn result + '\"';\r\n};\nvar _BLOCK = \"block\",\r\n\t_DEBUGGER = \"debugger\",\r\n\t_DO = \"do\",\r\n\t_RETURN = \"return\",\r\n\t_SWITCH = \"switch\",\r\n\t_THROW = \"throw\",\r\n\t_WHILE = \"while\",\r\n\t_WITH = \"with\",\r\n\t_LABEL = \"label\",\r\n\t_STAT = \"stat\", // Statement 声明\r\n\t_NAME = \"name\",\r\n\t_FOR = \"for\",\r\n\t_IF = \"if\",\r\n\t_TRY = \"try\",\r\n\t_VAR = \"var\",\r\n\t_CONST = \"const\",\r\n\t_NEW = \"new\",\r\n\t_REGEXP = \"regexp\",\r\n\t_ARRAY = \"array\",\r\n\t_OBJECT = \"object\",\r\n\t_DOT = \"dot\",\r\n\t_SUB = \"sub\",\r\n\t_CALL = \"call\",\r\n\t_BINARY = \"binary\",\r\n\t_CONDITIONAL = \"conditional\",\r\n\t_ASSIGN = \"assign\",\r\n\t_SEQ = \"seq\",\r\n\t_QMLBINDING = \"qmlbinding\",\r\n\t_QMLVALUE = \"qmlvalue\",\r\n\t_QMLALIASDEF = \"qmlaliasdef\",\r\n\t_QMLPROPDEF = \"qmlpropdef\",\r\n\t_QMLDEFAULTPROP = \"qmldefaultprop\",\r\n\t_QMLSIGNALDEF = \"qmlsignaldef\",\r\n\t_QMLMETHOD = \"qmlmethod\",\r\n\t_QMLPROP = \"qmlprop\",\r\n\t_QMLELEM = \"qmlelem\",\r\n\t_QMLOBJDEF = \"qmlobjdef\",\r\n\t_QMLOBJ = \"qmlobj\",\r\n\t_QMLIMPORT = \"qmlimport\",\r\n\t_TOPLEVEL = \"toplevel\";\r\n// 补充\r\nvar _NUM = \"num\",\r\n\t_STRING = \"string\";\r\n_FUNCTION = \"function\"\r\n\t// 单目运算符\r\nvar _UNARY_PREFIX = \"unary-prefix\", //前\r\n\t_UNARY_POSTFIX = \"unary-postfix\"; //后\r\n\r\nglobal.QMLTreeToJS = QMLTreeToJS;\r\n\r\nfunction QMLTreeToJS(tree, options) {\r\n\t/* RETURN:\r\n\t * code\r\n\t * params\r\n\t * args\r\n\t *\r\n\t * Function(args_name, code)(args)\r\n\t */\r\n\tvar args_info = {\r\n\t\tparams: [],\r\n\t\targs: []\r\n\t}\r\n\treturn {\r\n\t\tcode: _QMLTreeToJSBuilder([tree], args_info, \"\"),\r\n\t\tparams: args_info.params,\r\n\t\targs: args_info.args\r\n\t}\r\n};\r\n\r\nfunction _QMLTreeToJSBuilder(tree, args_info, param_prefix) {\r\n\tvar i = 0;\r\n\tvar node\r\n\tvar res = \"\"\r\n\twhile (node = tree && tree[i++]) {\r\n\t\t// 不使用switch-case，确保更高的压缩率\r\n\t\t/*\r\n\t\t * TYPE\r\n\t\t */\r\n\t\tvar type = node[0];\r\n\t\t/*\r\n\t\t * importTree, documentTree\r\n\t\t */\r\n\t\tif (type === _TOPLEVEL) {\r\n\t\t\tres += QMLTreeToJSBuilder[_TOPLEVEL](node, args_info, param_prefix + \"_\" + i)\r\n\t\t} else {\r\n\t\t\tthrow SyntaxError(\"unknow TYPE:\" + type + \", Tree-Node-Index:\" + i);\r\n\t\t}\r\n\t}\r\n\treturn res\r\n};\r\nvar QMLTreeToJSBuilder = _QMLTreeToJSBuilder._ = {};\r\nQMLTreeToJSBuilder[_TOPLEVEL] = function(node, args_info, param_prefix) {\r\n\treturn \"QML.import(\" +\r\n\t\t\"[\" +\r\n\t\t$Map(node[1], function(import_node, i) {\r\n\t\t\treturn QMLTreeToJSBuilder[_QMLIMPORT](import_node, args_info, param_prefix + i)\r\n\t\t}).join() +\r\n\t\t\"],function($){return \" + //$scope\r\n\t\tQMLTreeToJSBuilder[_QMLELEM](node[2], args_info, param_prefix) +\r\n\t\t\"})\"\r\n};\r\n\r\nQMLTreeToJSBuilder[_QMLIMPORT] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * moduleName, version, namespace, isDottedNotation\r\n\t */\r\n\tvar param_name = param_prefix + \"_IMPORT_\";\r\n\t$Push(args_info.params, param_name);\r\n\t$Push(args_info.args, node);\r\n\treturn param_name\r\n};\r\n\r\nQMLTreeToJSBuilder[_QMLELEM] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * className, ?, propertys\r\n\t */\r\n\tvar param_name = param_prefix + \"_ELEM_\";\r\n\t$Push(args_info.params, param_name);\r\n\t$Push(args_info.args, node);\r\n\r\n\treturn \"$.\" + _QMLELEM + \"('\" + node[1] + \"',\" +\r\n\t\t(node[2] ? (\"'\" + node[2] + \"'\") : \"null\") +\r\n\t\t\",[\" +\r\n\t\t$Map(node[3], function(child_node, i) {\r\n\t\t\treturn QMLTreeToJSBuilder[child_node[0]](child_node, args_info, param_name + i)\r\n\t\t}).join() +\r\n\t\t\"])\"\r\n};\r\n\r\nQMLTreeToJSBuilder[_QMLPROP] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * propName, propValue, *sourceCode\r\n\t */\r\n\tvar param_name = param_prefix + \"_PROP_\";\r\n\tvar propValue = node[2];\r\n\t// $Push(args_info.params, param_name);\r\n\t// $Push(args_info.args, node);\r\n\r\n\treturn \"$.\" + _QMLPROP + \"('\" + node[1] + \"',\" +\r\n\t\tQMLTreeToJSBuilder[propValue[0]](propValue, args_info, param_name) +\r\n\t\t\")\"\r\n};\r\nQMLTreeToJSBuilder[_QMLBINDING] = function(node, args_info, param_prefix) {\r\n\treturn \"QMLBINDING()\"\r\n};\r\nQMLTreeToJSBuilder[_QMLVALUE] = function(node, args_info, param_prefix) {\r\n\treturn \"QMLVALUE()\"\r\n};\r\nQMLTreeToJSBuilder[_QMLALIASDEF] = function(node, args_info, param_prefix) {\r\n\treturn \"QMLALIASDEF()\"\r\n};\r\nQMLTreeToJSBuilder[_QMLPROPDEF] = function(node, args_info, param_prefix) {\r\n\treturn \"QMLPROPDEF()\"\r\n};\r\nQMLTreeToJSBuilder[_QMLDEFAULTPROP] = function(node, args_info, param_prefix) {\r\n\treturn \"QMLDEFAULTPROP()\"\r\n};\r\nQMLTreeToJSBuilder[_QMLSIGNALDEF] = function(node, args_info, param_prefix) {\r\n\treturn \"QMLSIGNALDEF()\"\r\n};\r\nQMLTreeToJSBuilder[_QMLMETHOD] = function(node, args_info, param_prefix) {\r\n\treturn \"QMLMETHOD()\"\r\n};\r\nQMLTreeToJSBuilder[_QMLOBJDEF] = function(node, args_info, param_prefix) {\r\n\treturn \"$.\" + _QMLOBJDEF + \"('\" + node[1] + \"','\" + node[2] + \"',\" + ItemQMLTreeToJSBuilder(node[3]) + \")\"\r\n};\r\nQMLTreeToJSBuilder[_QMLOBJ] = function(node, args_info, param_prefix) {\r\n\treturn \"QMLOBJ()\"\r\n};\r\n\r\nfunction ArrayQMLTreeToJSBuilder(nodes, args_info, param_prefix) {\r\n\treturn $Map(nodes, function(child_node, i) {\r\n\t\t\treturn ItemQMLTreeToJSBuilder(child_node, args_info, param_prefix + i)\r\n\t\t}) /*.join()*/ //join可以不写会隐式调用\r\n};\r\n\r\nfunction ItemQMLTreeToJSBuilder(node, args_info, param_prefix) {\r\n\tif (node && !QMLTreeToJSBuilder[node[0]]) {\r\n\t\tconsole.log(node)\r\n\t}\r\n\treturn node && QMLTreeToJSBuilder[node[0]](node, args_info, param_prefix)\r\n};\nfunction Doc(doc) {\r\n\tthis.doc = doc || global.document\r\n};\r\nvar globalDoc = Doc.global = new Doc();\r\nDoc.prototype = {\r\n\tcreateElement: function(nodeName) {\r\n\t\treturn {\r\n\t\t\ttagName: nodeName.toUpperCase()\r\n\t\t}\r\n\t}\r\n}\nQMLTreeToJSBuilder[_BLOCK] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * 代码块，存在于function，if-else，while，try等可以包裹代码块的地方\r\n\t * TODO：与ES6中的let关键字相关\r\n\t */\r\n\treturn \"$.block(\" + ArrayQMLTreeToJSBuilder(node[1], args_info, param_prefix) + \")\"\r\n};\r\nQMLTreeToJSBuilder[_DEBUGGER] = function(node, args_info, param_prefix) {\r\n\treturn \"DEBUGGER()\"\r\n};\r\nQMLTreeToJSBuilder[_DO] = function(node, args_info, param_prefix) {\r\n\treturn \"DO()\"\r\n};\r\nQMLTreeToJSBuilder[_RETURN] = function(node, args_info, param_prefix) {\r\n\treturn \"$.return(\" + ItemQMLTreeToJSBuilder(node[1], args_info, param_prefix) + \")\"\r\n};\r\nQMLTreeToJSBuilder[_SWITCH] = function(node, args_info, param_prefix) {\r\n\treturn \"SWITCH()\"\r\n};\r\nQMLTreeToJSBuilder[_THROW] = function(node, args_info, param_prefix) {\r\n\treturn \"THROW()\"\r\n};\r\nQMLTreeToJSBuilder[_WHILE] = function(node, args_info, param_prefix) {\r\n\treturn \"WHILE()\"\r\n};\r\nQMLTreeToJSBuilder[_WITH] = function(node, args_info, param_prefix) {\r\n\treturn \"WITH()\"\r\n};\r\nQMLTreeToJSBuilder[_LABEL] = function(node, args_info, param_prefix) {\r\n\treturn \"LABEL()\"\r\n};\r\nQMLTreeToJSBuilder[_STAT] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * statType,..args\r\n\t */\r\n\tvar statInfo = node[1]\r\n\treturn ItemQMLTreeToJSBuilder(statInfo, args_info, param_prefix);\r\n};\r\nQMLTreeToJSBuilder[_NAME] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * name||boolean||null\r\n\t */\r\n\tvar name = node[1];\r\n\tif (name === \"null\" || name === \"false\" || name === \"true\") {\r\n\t\treturn name\r\n\t}\r\n\treturn \"$.name('\" + name + \"')\";\r\n};\r\nQMLTreeToJSBuilder[_FOR] = function(node, args_info, param_prefix) {\r\n\treturn \"FOR()\"\r\n};\r\nQMLTreeToJSBuilder[_IF] = function(node, args_info, param_prefix) {\r\n\treturn \"IF()\"\r\n};\r\nQMLTreeToJSBuilder[_TRY] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * try ,catch , finally(可能是null)\r\n\t * try、finally里面是多行代码\r\n\t * catch是一段特殊声明的err字段加上代码块\r\n\t */\r\n\treturn \"$.try([\" +\r\n\t\t// try\r\n\t\tArrayQMLTreeToJSBuilder(node[1], args_info, param_prefix) + \"],'\" + //try-body\r\n\t\t// catch\r\n\t\tnode[2][0] + \"',[\" + //catch-err-name\r\n\t\tArrayQMLTreeToJSBuilder(node[2][1], args_info, param_prefix) + \"],\" + //catch-body\r\n\t\t// finally\r\n\t\t(node[3] && (\"[\" + ArrayQMLTreeToJSBuilder(node[3], args_info, param_prefix) + \"]\")) + //finally-body\r\n\t\t\")\"\r\n};\r\nQMLTreeToJSBuilder[_VAR] = function(node, args_info, param_prefix) {\r\n\treturn \"VAR()\"\r\n};\r\nQMLTreeToJSBuilder[_CONST] = function(node, args_info, param_prefix) {\r\n\treturn \"CONST()\"\r\n};\r\nQMLTreeToJSBuilder[_NEW] = function(node, args_info, param_prefix) {\r\n\treturn \"NEW()\"\r\n};\r\nQMLTreeToJSBuilder[_REGEXP] = function(node, args_info, param_prefix) {\r\n\treturn \"REGEXP()\"\r\n};\r\nQMLTreeToJSBuilder[_ARRAY] = function(node, args_info, param_prefix) {\r\n\treturn \"ARRAY()\"\r\n};\r\nQMLTreeToJSBuilder[_OBJECT] = function(node, args_info, param_prefix) {\r\n\treturn \"OBJECT()\"\r\n};\r\n/*\r\n * 取属性\r\n * dot是直接取: a.b\r\n * sub是使用下标取: a['b']\r\n */\r\nQMLTreeToJSBuilder[_DOT] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * obj,key\r\n\t */\r\n\treturn \"$.dot(\" + ItemQMLTreeToJSBuilder(node[1]) + \",'\" + node[2] + \"')\"\r\n};\r\nQMLTreeToJSBuilder[_SUB] = function(node, args_info, param_prefix) {\r\n\treturn \"$.sub(\" + ArrayQMLTreeToJSBuilder($Slice(node, 1)) + \")\"\r\n};\r\n/*\r\n * 调用函数\r\n */\r\nQMLTreeToJSBuilder[_CALL] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * function(defined or get by name),args(Array)\r\n\t */\r\n\tvar fun = node[1]\r\n\treturn \"$.call(\" + ItemQMLTreeToJSBuilder(fun, args_info, param_prefix) +\r\n\t\t\",[\" +\r\n\t\tArrayQMLTreeToJSBuilder(node[2], args_info, param_prefix) +\r\n\t\t\"])\"\r\n};\r\n/*\r\n * 双目运算符\r\n */\r\nQMLTreeToJSBuilder[_BINARY] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * 二进制表达式，或者是运算表达式，比如>>、<<、+、^等等\r\n\t * 逻辑表达式，就||、&&什么的\r\n\t */\r\n\t// var arg1 = node[2];\r\n\t// var arg2 = node[3];\r\n\treturn \"$.binary('\" + node[1] + \"',\" +\r\n\t\tArrayQMLTreeToJSBuilder($Slice(node, 2), args_info, param_prefix) +\r\n\t\t\")\"\r\n};\r\n/*\r\n * 三目运算符\r\n */\r\nQMLTreeToJSBuilder[_CONDITIONAL] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * 条件表达式\r\n\t */\r\n\t// var _if = node[1];\r\n\t// var _then = node[2];\r\n\t// var _else = node[3];\r\n\treturn \"$.conditional(\" +\r\n\t\tArrayQMLTreeToJSBuilder($Slice(node, 1), args_info, param_prefix) +\r\n\t\t\")\"\r\n};\r\nQMLTreeToJSBuilder[_ASSIGN] = function(node, args_info, param_prefix) {\r\n\treturn \"ASSIGN()\"\r\n};\r\nQMLTreeToJSBuilder[_SEQ] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * 序列表达式，意味着多个表达式混合，用,进行分隔\r\n\t * \"seq\", statItem, ...statItem\r\n\t */\r\n\treturn \"$.seq(\" +\r\n\t\tArrayQMLTreeToJSBuilder($Slice(node, 1), args_info, param_prefix) +\r\n\t\t\")\"\r\n};\r\n/*\r\n * 替代原生的对象：number、string\r\n * 从而在不改动原生prototype的基础上拓展方法\r\n * boolean语法和name的语法一样，在name那边做处理，基本上也没什么可以拓展的，所以直接用原生的\r\n */\r\nQMLTreeToJSBuilder[_NUM] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * number\r\n\t * TODO:ES6中数字的表达范围更广，所以到时候要针对高版本的数值表达字符串给解析成数字\r\n\t */\r\n\treturn \"$.num(\" + node[1] + \")\"\r\n};\r\nQMLTreeToJSBuilder[_STRING] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * string\r\n\t */\r\n\treturn \"$.string(\" + strStringify(node[1]) + \")\"\r\n};\r\n/*\r\n * 单目运算符\r\n */\r\nQMLTreeToJSBuilder[_UNARY_PREFIX] = function(node, args_info, param_prefix) {\r\n\tvar arg = node[2];\r\n\treturn \"$.unary_prefix('\" + node[1] + \"',\" + ItemQMLTreeToJSBuilder(arg, args_info, param_prefix) + \")\";\r\n};\r\nQMLTreeToJSBuilder[_UNARY_POSTFIX] = function(node, args_info, param_prefix) {\r\n\tvar arg = node[2];\r\n\treturn \"$.unary_postfix('\" + node[1] + \"',\" + ItemQMLTreeToJSBuilder(arg, args_info, param_prefix) + \")\";\r\n};\r\n/*\r\n * 函数定义\r\n */\r\nQMLTreeToJSBuilder[_FUNCTION] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * FunctionName(string||null), ArgsDefine[], FunctionBody\r\n\t * 函数的定义需要把当前的声明域传入\r\n\t * TODO:目前Parser中不支持默认参数等ES6特性\r\n\t */\r\n\tvar functionName = node[1];\r\n\tfunctionName && (functionName = strStringify(functionName)); //同'\"'+functionName+'\"'，这里为了节省字符\r\n\tvar argsDefine = $Map(node[2], function(argName) {\r\n\t\treturn strStringify(argName)\r\n\t});\r\n\r\n\treturn \"$.function(\" + functionName + \",[\" + argsDefine.join() + \",\" + ArrayQMLTreeToJSBuilder(node[3]) + \"])\"\r\n};\nglobal.QML = {\r\n\t\"import\": function(deps, callback) {\r\n\t\tcallback()\r\n\t}\r\n};\r\n\r\n\nfunction QMLElem(doc, tagName, namespace) {\r\n\tvar self = {};\r\n\ttagName = self.tagName = tagName.toUpperCase();\r\n\tnamespace = self.namespace || \"\";\r\n\tvar dom = self.dom = doc.createElement(tagName);\r\n\tvar attr = self.attr = new QmlPropSet();\r\n\tself.addAttr = function(qmlprop) {\r\n\t\t$Push(QmlPropSet, qmlprop);\r\n\t}\r\n};\r\n\r\nfunction QmlPropSet() {\r\n\treturn []\r\n};\nfunction RunTime(scope, doc) {\r\n\tthis.scope = scope || new Scope();\r\n\tthis.doc = doc || globalDoc\r\n};\r\nvar __RunTimeProtoType = RunTime.prototype = {\r\n\tBLOCK: function() {\r\n\r\n\t},\r\n\t_DEBUGGER: function() {\r\n\r\n\t},\r\n\t_DO: function() {\r\n\r\n\t},\r\n\t_RETURN: function() {\r\n\r\n\t},\r\n\t_SWITCH: function() {\r\n\r\n\t},\r\n\t_THROW: function() {\r\n\r\n\t},\r\n\t_WHILE: function() {\r\n\r\n\t},\r\n\t_WITH: function() {\r\n\r\n\t},\r\n\t_LABEL: function() {\r\n\r\n\t},\r\n\t_STAT: function() {\r\n\r\n\t},\r\n\t_NAME: function() {\r\n\r\n\t},\r\n\t_FOR: function() {\r\n\r\n\t},\r\n\t_IF: function() {\r\n\r\n\t},\r\n\t_TRY: function() {\r\n\r\n\t},\r\n\t_VAR: function() {\r\n\r\n\t},\r\n\t_CONST: function() {\r\n\r\n\t},\r\n\t_NEW: function() {\r\n\r\n\t},\r\n\t_REGEXP: function() {\r\n\r\n\t},\r\n\t_ARRAY: function() {\r\n\r\n\t},\r\n\t_OBJECT: function() {\r\n\r\n\t},\r\n\t_DOT: function() {\r\n\r\n\t},\r\n\t_SUB: function() {\r\n\r\n\t},\r\n\t_CALL: function() {\r\n\r\n\t},\r\n\t_BINARY: function() {\r\n\r\n\t},\r\n\t_CONDITIONAL: function() {\r\n\r\n\t},\r\n\t_ASSIGN: function() {\r\n\r\n\t},\r\n\t_SEQ: function() {\r\n\r\n\t},\r\n\t_QMLBINDING: function() {\r\n\r\n\t},\r\n\t_QMLVALUE: function() {\r\n\r\n\t},\r\n\t_QMLALIASDEF: function() {\r\n\r\n\t},\r\n\t_QMLPROPDEF: function() {\r\n\r\n\t},\r\n\t_QMLDEFAULTPROP: function() {\r\n\r\n\t},\r\n\t_QMLSIGNALDEF: function() {\r\n\r\n\t},\r\n\t_QMLMETHOD: function() {\r\n\r\n\t},\r\n\t_QMLPROP: function() {\r\n\r\n\t},\r\n\t_QMLELEM: function(tagName, namespace, args) {\r\n\t\tvar self = this;\r\n\t\tvar node = new QMLElem(self.doc, tagName, namespace);\r\n\t\t$ForEach(args, node.addAttr);\r\n\t\treturn node;\r\n\t},\r\n\t_QMLOBJDEF: function() {\r\n\r\n\t},\r\n\t_QMLOBJ: function() {\r\n\r\n\t},\r\n\t_QMLIMPORT: function() {\r\n\r\n\t},\r\n\t_TOPLEVEL: function() {\r\n\r\n\t},\r\n\t_NUM: function() {\r\n\r\n\t},\r\n\t_STRING: function() {\r\n\r\n\t},\r\n\t_FUNCTION: function() {\r\n\r\n\t},\r\n\t_UNARY_PREFIX: function() {\r\n\r\n\t},\r\n\t_UNARY_POSTFIX: function() {\r\n\r\n\t},\r\n};\nfunction Scope(obj, parent) {\r\n\tthis.data = obj;\r\n\tthis.parent = parent || globalScope;\r\n};\r\nvar globalScope = Scope.global = new Scope(global);\r\nScope.prototype = {\r\n\tget: function(key) {\r\n\t\treturn this[key]\r\n\t},\r\n\tset: function(key, value) {\r\n\t\treturn this[key] = value\r\n\t}\r\n};\n})(typeof global != 'undefined' ? global : typeof window != 'undefined' ? window : this);","(function(global){\r\n\n/*\r\n * 更好的压缩率\r\n */\r\nfunction $Push(arr, item) {\r\n\tarr[arr.length] = item;\r\n\treturn arr\r\n}\r\n\r\nfunction $ForEach(arr, cb) {\r\n\tfor (var i = 0, len = arr.length; i < len; i += 1) {\r\n\t\tcb(arr[i], i)\r\n\t}\r\n}\r\n\r\nfunction $Map(arr, cb) {\r\n\tfor (var i = 0, len = arr.length, res = []; i < len; i += 1) {\r\n\t\t$Push(res, cb(arr[i], i))\r\n\t}\r\n\treturn res\r\n}\r\n\r\nfunction $Slice(arr, start_index, end_index) {\r\n\treturn arr.slice(start_index, end_index)\r\n};\r\n\r\n//将字符串反转义,同JSON.stringify(string)\r\nvar charIndexBuggy = \"a\" [0] != \"a\";\r\nvar Escapes = {\r\n\t92: \"\\\\\\\\\",\r\n\t34: '\\\\\"',\r\n\t8: \"\\\\b\",\r\n\t12: \"\\\\f\",\r\n\t10: \"\\\\n\",\r\n\t13: \"\\\\r\",\r\n\t9: \"\\\\t\"\r\n};\r\n\r\nfunction strStringify(value) {\r\n\tvar result = '\"',\r\n\t\tindex = 0,\r\n\t\tlength = value.length,\r\n\t\tuseCharIndex = !charIndexBuggy || length > 10;\r\n\tvar symbols = useCharIndex && (charIndexBuggy ? value.split(\"\") : value);\r\n\tfor (; index < length; index++) {\r\n\t\tvar charCode = value.charCodeAt(index);\r\n\t\t// If the character is a control character, append its Unicode or\r\n\t\t// shorthand escape sequence; otherwise, append the character as-is.\r\n\t\tswitch (charCode) {\r\n\t\t\tcase 8:\r\n\t\t\tcase 9:\r\n\t\t\tcase 10:\r\n\t\t\tcase 12:\r\n\t\t\tcase 13:\r\n\t\t\tcase 34:\r\n\t\t\tcase 92:\r\n\t\t\t\tresult += Escapes[charCode];\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tif (charCode < 32) {\r\n\t\t\t\t\tresult += unicodePrefix + toPaddedString(2, charCode.toString(16));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tresult += useCharIndex ? symbols[index] : value.charAt(index);\r\n\t\t}\r\n\t}\r\n\treturn result + '\"';\r\n};\nvar _BLOCK = \"block\",\r\n\t_DEBUGGER = \"debugger\",\r\n\t_DO = \"do\",\r\n\t_RETURN = \"return\",\r\n\t_SWITCH = \"switch\",\r\n\t_THROW = \"throw\",\r\n\t_WHILE = \"while\",\r\n\t_WITH = \"with\",\r\n\t_LABEL = \"label\",\r\n\t_STAT = \"stat\", // Statement 声明\r\n\t_NAME = \"name\",\r\n\t_FOR = \"for\",\r\n\t_IF = \"if\",\r\n\t_TRY = \"try\",\r\n\t_VAR = \"var\",\r\n\t_CONST = \"const\",\r\n\t_NEW = \"new\",\r\n\t_REGEXP = \"regexp\",\r\n\t_ARRAY = \"array\",\r\n\t_OBJECT = \"object\",\r\n\t_DOT = \"dot\",\r\n\t_SUB = \"sub\",\r\n\t_CALL = \"call\",\r\n\t_BINARY = \"binary\",\r\n\t_CONDITIONAL = \"conditional\",\r\n\t_ASSIGN = \"assign\",\r\n\t_SEQ = \"seq\",\r\n\t_QMLBINDING = \"qmlbinding\",\r\n\t_QMLVALUE = \"qmlvalue\",\r\n\t_QMLALIASDEF = \"qmlaliasdef\",\r\n\t_QMLPROPDEF = \"qmlpropdef\",\r\n\t_QMLDEFAULTPROP = \"qmldefaultprop\",\r\n\t_QMLSIGNALDEF = \"qmlsignaldef\",\r\n\t_QMLMETHOD = \"qmlmethod\",\r\n\t_QMLPROP = \"qmlprop\",\r\n\t_QMLELEM = \"qmlelem\",\r\n\t_QMLOBJDEF = \"qmlobjdef\",\r\n\t_QMLOBJ = \"qmlobj\",\r\n\t_QMLIMPORT = \"qmlimport\",\r\n\t_TOPLEVEL = \"toplevel\";\r\n// 补充\r\nvar _NUM = \"num\",\r\n\t_STRING = \"string\";\r\n_FUNCTION = \"function\"\r\n\t// 单目运算符\r\nvar _UNARY_PREFIX = \"unary-prefix\", //前\r\n\t_UNARY_POSTFIX = \"unary-postfix\"; //后\r\n\r\nglobal.QMLTreeToJS = QMLTreeToJS;\r\n\r\nfunction QMLTreeToJS(tree, options) {\r\n\t/* RETURN:\r\n\t * code\r\n\t * params\r\n\t * args\r\n\t *\r\n\t * Function(args_name, code)(args)\r\n\t */\r\n\tvar args_info = {\r\n\t\tparams: [],\r\n\t\targs: []\r\n\t}\r\n\treturn {\r\n\t\tcode: _QMLTreeToJSBuilder([tree], args_info, \"\"),\r\n\t\tparams: args_info.params,\r\n\t\targs: args_info.args\r\n\t}\r\n};\r\n\r\nfunction _QMLTreeToJSBuilder(tree, args_info, param_prefix) {\r\n\tvar i = 0;\r\n\tvar node\r\n\tvar res = \"\"\r\n\twhile (node = tree && tree[i++]) {\r\n\t\t// 不使用switch-case，确保更高的压缩率\r\n\t\t/*\r\n\t\t * TYPE\r\n\t\t */\r\n\t\tvar type = node[0];\r\n\t\t/*\r\n\t\t * importTree, documentTree\r\n\t\t */\r\n\t\tif (type === _TOPLEVEL) {\r\n\t\t\tres += QMLTreeToJSBuilder[_TOPLEVEL](node, args_info, param_prefix + \"_\" + i)\r\n\t\t} else {\r\n\t\t\tthrow SyntaxError(\"unknow TYPE:\" + type + \", Tree-Node-Index:\" + i);\r\n\t\t}\r\n\t}\r\n\treturn res\r\n};\r\nvar QMLTreeToJSBuilder = _QMLTreeToJSBuilder._ = {};\r\nQMLTreeToJSBuilder[_TOPLEVEL] = function(node, args_info, param_prefix) {\r\n\treturn \"QML.import(\" +\r\n\t\t\"[\" +\r\n\t\t$Map(node[1], function(import_node, i) {\r\n\t\t\treturn QMLTreeToJSBuilder[_QMLIMPORT](import_node, args_info, param_prefix + i)\r\n\t\t}).join() +\r\n\t\t\"],function($){return \" + //$scope\r\n\t\tQMLTreeToJSBuilder[_QMLELEM](node[2], args_info, param_prefix) +\r\n\t\t\"})\"\r\n};\r\n\r\nQMLTreeToJSBuilder[_QMLIMPORT] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * moduleName, version, namespace, isDottedNotation\r\n\t */\r\n\tvar param_name = param_prefix + \"_IMPORT_\";\r\n\t$Push(args_info.params, param_name);\r\n\t$Push(args_info.args, node);\r\n\treturn param_name\r\n};\r\n\r\nQMLTreeToJSBuilder[_QMLELEM] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * className, ?, propertys\r\n\t */\r\n\tvar param_name = param_prefix + \"_ELEM_\";\r\n\t$Push(args_info.params, param_name);\r\n\t$Push(args_info.args, node);\r\n\r\n\treturn \"$.\" + _QMLELEM + \"('\" + node[1] + \"',\" +\r\n\t\t(node[2] ? (\"'\" + node[2] + \"'\") : \"null\") +\r\n\t\t\",[\" +\r\n\t\t$Map(node[3], function(child_node, i) {\r\n\t\t\treturn QMLTreeToJSBuilder[child_node[0]](child_node, args_info, param_name + i)\r\n\t\t}).join() +\r\n\t\t\"])\"\r\n};\r\n\r\nQMLTreeToJSBuilder[_QMLPROP] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * propName, propValue, *sourceCode\r\n\t */\r\n\tvar param_name = param_prefix + \"_PROP_\";\r\n\tvar propValue = node[2];\r\n\t// $Push(args_info.params, param_name);\r\n\t// $Push(args_info.args, node);\r\n\r\n\treturn \"$.\" + _QMLPROP + \"('\" + node[1] + \"',\" +\r\n\t\tQMLTreeToJSBuilder[propValue[0]](propValue, args_info, param_name) +\r\n\t\t\")\"\r\n};\r\nQMLTreeToJSBuilder[_QMLBINDING] = function(node, args_info, param_prefix) {\r\n\treturn \"QMLBINDING()\"\r\n};\r\nQMLTreeToJSBuilder[_QMLVALUE] = function(node, args_info, param_prefix) {\r\n\treturn \"QMLVALUE()\"\r\n};\r\nQMLTreeToJSBuilder[_QMLALIASDEF] = function(node, args_info, param_prefix) {\r\n\treturn \"QMLALIASDEF()\"\r\n};\r\nQMLTreeToJSBuilder[_QMLPROPDEF] = function(node, args_info, param_prefix) {\r\n\treturn \"QMLPROPDEF()\"\r\n};\r\nQMLTreeToJSBuilder[_QMLDEFAULTPROP] = function(node, args_info, param_prefix) {\r\n\treturn \"QMLDEFAULTPROP()\"\r\n};\r\nQMLTreeToJSBuilder[_QMLSIGNALDEF] = function(node, args_info, param_prefix) {\r\n\treturn \"QMLSIGNALDEF()\"\r\n};\r\nQMLTreeToJSBuilder[_QMLMETHOD] = function(node, args_info, param_prefix) {\r\n\treturn \"QMLMETHOD()\"\r\n};\r\nQMLTreeToJSBuilder[_QMLOBJDEF] = function(node, args_info, param_prefix) {\r\n\treturn \"$.\" + _QMLOBJDEF + \"('\" + node[1] + \"','\" + node[2] + \"',\" + ItemQMLTreeToJSBuilder(node[3]) + \")\"\r\n};\r\nQMLTreeToJSBuilder[_QMLOBJ] = function(node, args_info, param_prefix) {\r\n\treturn \"QMLOBJ()\"\r\n};\r\n\r\nfunction ArrayQMLTreeToJSBuilder(nodes, args_info, param_prefix) {\r\n\treturn $Map(nodes, function(child_node, i) {\r\n\t\t\treturn ItemQMLTreeToJSBuilder(child_node, args_info, param_prefix + i)\r\n\t\t}) /*.join()*/ //join可以不写会隐式调用\r\n};\r\n\r\nfunction ItemQMLTreeToJSBuilder(node, args_info, param_prefix) {\r\n\tif (node && !QMLTreeToJSBuilder[node[0]]) {\r\n\t\tconsole.log(node)\r\n\t}\r\n\treturn node && QMLTreeToJSBuilder[node[0]](node, args_info, param_prefix)\r\n};\nfunction Doc(doc) {\r\n\tthis.doc = doc || global.document\r\n};\r\nvar globalDoc = Doc.global = new Doc();\r\nDoc.prototype = {\r\n\tcreateElement: function(nodeName) {\r\n\t\treturn {\r\n\t\t\ttagName: nodeName.toUpperCase()\r\n\t\t}\r\n\t}\r\n}\nQMLTreeToJSBuilder[_BLOCK] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * 代码块，存在于function，if-else，while，try等可以包裹代码块的地方\r\n\t * TODO：与ES6中的let关键字相关\r\n\t */\r\n\treturn \"$.block(\" + ArrayQMLTreeToJSBuilder(node[1], args_info, param_prefix) + \")\"\r\n};\r\nQMLTreeToJSBuilder[_DEBUGGER] = function(node, args_info, param_prefix) {\r\n\treturn \"DEBUGGER()\"\r\n};\r\nQMLTreeToJSBuilder[_DO] = function(node, args_info, param_prefix) {\r\n\treturn \"DO()\"\r\n};\r\nQMLTreeToJSBuilder[_RETURN] = function(node, args_info, param_prefix) {\r\n\treturn \"$.return(\" + ItemQMLTreeToJSBuilder(node[1], args_info, param_prefix) + \")\"\r\n};\r\nQMLTreeToJSBuilder[_SWITCH] = function(node, args_info, param_prefix) {\r\n\treturn \"SWITCH()\"\r\n};\r\nQMLTreeToJSBuilder[_THROW] = function(node, args_info, param_prefix) {\r\n\treturn \"THROW()\"\r\n};\r\nQMLTreeToJSBuilder[_WHILE] = function(node, args_info, param_prefix) {\r\n\treturn \"WHILE()\"\r\n};\r\nQMLTreeToJSBuilder[_WITH] = function(node, args_info, param_prefix) {\r\n\treturn \"WITH()\"\r\n};\r\nQMLTreeToJSBuilder[_LABEL] = function(node, args_info, param_prefix) {\r\n\treturn \"LABEL()\"\r\n};\r\nQMLTreeToJSBuilder[_STAT] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * statType,..args\r\n\t */\r\n\tvar statInfo = node[1]\r\n\treturn ItemQMLTreeToJSBuilder(statInfo, args_info, param_prefix);\r\n};\r\nQMLTreeToJSBuilder[_NAME] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * name||boolean||null\r\n\t */\r\n\tvar name = node[1];\r\n\tif (name === \"null\" || name === \"false\" || name === \"true\") {\r\n\t\treturn name\r\n\t}\r\n\treturn \"$.name('\" + name + \"')\";\r\n};\r\nQMLTreeToJSBuilder[_FOR] = function(node, args_info, param_prefix) {\r\n\treturn \"FOR()\"\r\n};\r\nQMLTreeToJSBuilder[_IF] = function(node, args_info, param_prefix) {\r\n\treturn \"IF()\"\r\n};\r\nQMLTreeToJSBuilder[_TRY] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * try ,catch , finally(可能是null)\r\n\t * try、finally里面是多行代码\r\n\t * catch是一段特殊声明的err字段加上代码块\r\n\t */\r\n\treturn \"$.try([\" +\r\n\t\t// try\r\n\t\tArrayQMLTreeToJSBuilder(node[1], args_info, param_prefix) + \"],'\" + //try-body\r\n\t\t// catch\r\n\t\tnode[2][0] + \"',[\" + //catch-err-name\r\n\t\tArrayQMLTreeToJSBuilder(node[2][1], args_info, param_prefix) + \"],\" + //catch-body\r\n\t\t// finally\r\n\t\t(node[3] && (\"[\" + ArrayQMLTreeToJSBuilder(node[3], args_info, param_prefix) + \"]\")) + //finally-body\r\n\t\t\")\"\r\n};\r\nQMLTreeToJSBuilder[_VAR] = function(node, args_info, param_prefix) {\r\n\treturn \"VAR()\"\r\n};\r\nQMLTreeToJSBuilder[_CONST] = function(node, args_info, param_prefix) {\r\n\treturn \"CONST()\"\r\n};\r\nQMLTreeToJSBuilder[_NEW] = function(node, args_info, param_prefix) {\r\n\treturn \"NEW()\"\r\n};\r\nQMLTreeToJSBuilder[_REGEXP] = function(node, args_info, param_prefix) {\r\n\treturn \"REGEXP()\"\r\n};\r\nQMLTreeToJSBuilder[_ARRAY] = function(node, args_info, param_prefix) {\r\n\treturn \"ARRAY()\"\r\n};\r\nQMLTreeToJSBuilder[_OBJECT] = function(node, args_info, param_prefix) {\r\n\treturn \"OBJECT()\"\r\n};\r\n/*\r\n * 取属性\r\n * dot是直接取: a.b\r\n * sub是使用下标取: a['b']\r\n */\r\nQMLTreeToJSBuilder[_DOT] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * obj,key\r\n\t */\r\n\treturn \"$.dot(\" + ItemQMLTreeToJSBuilder(node[1]) + \",'\" + node[2] + \"')\"\r\n};\r\nQMLTreeToJSBuilder[_SUB] = function(node, args_info, param_prefix) {\r\n\treturn \"$.sub(\" + ArrayQMLTreeToJSBuilder($Slice(node, 1)) + \")\"\r\n};\r\n/*\r\n * 调用函数\r\n */\r\nQMLTreeToJSBuilder[_CALL] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * function(defined or get by name),args(Array)\r\n\t */\r\n\tvar fun = node[1]\r\n\treturn \"$.call(\" + ItemQMLTreeToJSBuilder(fun, args_info, param_prefix) +\r\n\t\t\",[\" +\r\n\t\tArrayQMLTreeToJSBuilder(node[2], args_info, param_prefix) +\r\n\t\t\"])\"\r\n};\r\n/*\r\n * 双目运算符\r\n */\r\nQMLTreeToJSBuilder[_BINARY] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * 二进制表达式，或者是运算表达式，比如>>、<<、+、^等等\r\n\t * 逻辑表达式，就||、&&什么的\r\n\t */\r\n\t// var arg1 = node[2];\r\n\t// var arg2 = node[3];\r\n\treturn \"$.binary('\" + node[1] + \"',\" +\r\n\t\tArrayQMLTreeToJSBuilder($Slice(node, 2), args_info, param_prefix) +\r\n\t\t\")\"\r\n};\r\n/*\r\n * 三目运算符\r\n */\r\nQMLTreeToJSBuilder[_CONDITIONAL] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * 条件表达式\r\n\t */\r\n\t// var _if = node[1];\r\n\t// var _then = node[2];\r\n\t// var _else = node[3];\r\n\treturn \"$.conditional(\" +\r\n\t\tArrayQMLTreeToJSBuilder($Slice(node, 1), args_info, param_prefix) +\r\n\t\t\")\"\r\n};\r\nQMLTreeToJSBuilder[_ASSIGN] = function(node, args_info, param_prefix) {\r\n\treturn \"ASSIGN()\"\r\n};\r\nQMLTreeToJSBuilder[_SEQ] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * 序列表达式，意味着多个表达式混合，用,进行分隔\r\n\t * \"seq\", statItem, ...statItem\r\n\t */\r\n\treturn \"$.seq(\" +\r\n\t\tArrayQMLTreeToJSBuilder($Slice(node, 1), args_info, param_prefix) +\r\n\t\t\")\"\r\n};\r\n/*\r\n * 替代原生的对象：number、string\r\n * 从而在不改动原生prototype的基础上拓展方法\r\n * boolean语法和name的语法一样，在name那边做处理，基本上也没什么可以拓展的，所以直接用原生的\r\n */\r\nQMLTreeToJSBuilder[_NUM] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * number\r\n\t * TODO:ES6中数字的表达范围更广，所以到时候要针对高版本的数值表达字符串给解析成数字\r\n\t */\r\n\treturn \"$.num(\" + node[1] + \")\"\r\n};\r\nQMLTreeToJSBuilder[_STRING] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * string\r\n\t */\r\n\treturn \"$.string(\" + strStringify(node[1]) + \")\"\r\n};\r\n/*\r\n * 单目运算符\r\n */\r\nQMLTreeToJSBuilder[_UNARY_PREFIX] = function(node, args_info, param_prefix) {\r\n\tvar arg = node[2];\r\n\treturn \"$.unary_prefix('\" + node[1] + \"',\" + ItemQMLTreeToJSBuilder(arg, args_info, param_prefix) + \")\";\r\n};\r\nQMLTreeToJSBuilder[_UNARY_POSTFIX] = function(node, args_info, param_prefix) {\r\n\tvar arg = node[2];\r\n\treturn \"$.unary_postfix('\" + node[1] + \"',\" + ItemQMLTreeToJSBuilder(arg, args_info, param_prefix) + \")\";\r\n};\r\n/*\r\n * 函数定义\r\n */\r\nQMLTreeToJSBuilder[_FUNCTION] = function(node, args_info, param_prefix) {\r\n\t/*\r\n\t * FunctionName(string||null), ArgsDefine[], FunctionBody\r\n\t * 函数的定义需要把当前的声明域传入\r\n\t * TODO:目前Parser中不支持默认参数等ES6特性\r\n\t */\r\n\tvar functionName = node[1];\r\n\tfunctionName && (functionName = strStringify(functionName)); //同'\"'+functionName+'\"'，这里为了节省字符\r\n\tvar argsDefine = $Map(node[2], function(argName) {\r\n\t\treturn strStringify(argName)\r\n\t});\r\n\r\n\treturn \"$.function(\" + functionName + \",[\" + argsDefine.join() + \",\" + ArrayQMLTreeToJSBuilder(node[3]) + \"])\"\r\n};\nglobal.QML = {\r\n\t\"import\": function(deps, callback) {\r\n\t\tcallback()\r\n\t}\r\n};\r\n\r\n\nfunction QMLElem(){}\nfunction RunTime(scope, doc) {\r\n\tthis.scope = scope || new Scope();\r\n\tthis.doc = doc || globalDoc\r\n};\r\nvar __RunTimeProtoType = RunTime.prototype = {\r\n\tBLOCK: function() {\r\n\r\n\t},\r\n\t_DEBUGGER: function() {\r\n\r\n\t},\r\n\t_DO: function() {\r\n\r\n\t},\r\n\t_RETURN: function() {\r\n\r\n\t},\r\n\t_SWITCH: function() {\r\n\r\n\t},\r\n\t_THROW: function() {\r\n\r\n\t},\r\n\t_WHILE: function() {\r\n\r\n\t},\r\n\t_WITH: function() {\r\n\r\n\t},\r\n\t_LABEL: function() {\r\n\r\n\t},\r\n\t_STAT: function() {\r\n\r\n\t},\r\n\t_NAME: function() {\r\n\r\n\t},\r\n\t_FOR: function() {\r\n\r\n\t},\r\n\t_IF: function() {\r\n\r\n\t},\r\n\t_TRY: function() {\r\n\r\n\t},\r\n\t_VAR: function() {\r\n\r\n\t},\r\n\t_CONST: function() {\r\n\r\n\t},\r\n\t_NEW: function() {\r\n\r\n\t},\r\n\t_REGEXP: function() {\r\n\r\n\t},\r\n\t_ARRAY: function() {\r\n\r\n\t},\r\n\t_OBJECT: function() {\r\n\r\n\t},\r\n\t_DOT: function() {\r\n\r\n\t},\r\n\t_SUB: function() {\r\n\r\n\t},\r\n\t_CALL: function() {\r\n\r\n\t},\r\n\t_BINARY: function() {\r\n\r\n\t},\r\n\t_CONDITIONAL: function() {\r\n\r\n\t},\r\n\t_ASSIGN: function() {\r\n\r\n\t},\r\n\t_SEQ: function() {\r\n\r\n\t},\r\n\t_QMLBINDING: function() {\r\n\r\n\t},\r\n\t_QMLVALUE: function() {\r\n\r\n\t},\r\n\t_QMLALIASDEF: function() {\r\n\r\n\t},\r\n\t_QMLPROPDEF: function() {\r\n\r\n\t},\r\n\t_QMLDEFAULTPROP: function() {\r\n\r\n\t},\r\n\t_QMLSIGNALDEF: function() {\r\n\r\n\t},\r\n\t_QMLMETHOD: function() {\r\n\r\n\t},\r\n\t_QMLPROP: function() {\r\n\r\n\t},\r\n\t_QMLELEM: function(tagName, namespace, args) {\r\n\t\tvar self = this;\r\n\t\tvar node = new QMLElem(self.doc, tagName, namespace);\r\n\t\t$ForEach(args, node.addAttr);\r\n\t\treturn node;\r\n\t},\r\n\t_QMLOBJDEF: function() {\r\n\r\n\t},\r\n\t_QMLOBJ: function() {\r\n\r\n\t},\r\n\t_QMLIMPORT: function() {\r\n\r\n\t},\r\n\t_TOPLEVEL: function() {\r\n\r\n\t},\r\n\t_NUM: function() {\r\n\r\n\t},\r\n\t_STRING: function() {\r\n\r\n\t},\r\n\t_FUNCTION: function() {\r\n\r\n\t},\r\n\t_UNARY_PREFIX: function() {\r\n\r\n\t},\r\n\t_UNARY_POSTFIX: function() {\r\n\r\n\t},\r\n};\nfunction Scope(obj, parent) {\r\n\tthis.data = obj;\r\n\tthis.parent = parent || globalScope;\r\n};\r\nvar globalScope = Scope.global = new Scope(global);\r\nScope.prototype = {\r\n\tget: function(key) {\r\n\t\treturn this[key]\r\n\t},\r\n\tset: function(key, value) {\r\n\t\treturn this[key] = value\r\n\t}\r\n};\n})(typeof global != 'undefined' ? global : typeof window != 'undefined' ? window : this);"],"sourceRoot":"/source/"}